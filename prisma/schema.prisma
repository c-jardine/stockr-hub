// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model StockLevel {
    id          String     @id @default(uuid())
    stock       Decimal
    stockUnit   StockUnit  @relation(fields: [stockUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockUnitId String
    minStock    Decimal?
    materials   Material[]
    products    Product[]
}

model StockUnit {
    id                   String       @id @default(uuid())
    nameSingular         String       @unique
    namePlural           String       @unique
    abbreviationSingular String       @unique
    abbreviationPlural   String       @unique
    category             String
    stockLevels          StockLevel[]
}

model Category {
    id                 String             @id @default(uuid())
    name               String             @unique
    slug               String             @unique
    color              String             @default("#cbd5e1")
    materialCategories MaterialCategory[]
    productCategories  ProductCategory[]
}

model StockLogData {
    id               String             @id @default(uuid())
    prevStock        Decimal
    stock            Decimal
    notes            String?
    createdAt        DateTime           @default(now())
    materialStockLog MaterialStockLog[]
}

model Vendor {
    id        String     @id @default(uuid())
    name      String     @unique
    url       String?
    materials Material[]
}

model MaterialCategory {
    id         String     @id @default(uuid())
    category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String
    materials  Material[]
}

model MaterialStockLog {
    material          Material        @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialId        String
    stockLogData      StockLogData    @relation(fields: [stockLogDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockLogDataId    String
    type              MaterialLogType @relation(fields: [materialLogTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialLogTypeId String

    @@id([materialId, stockLogDataId])
}

model MaterialLogType {
    id               String             @id @default(uuid())
    name             String             @unique
    materialStockLog MaterialStockLog[]
}

model Material {
    id               String             @id @default(uuid())
    name             String
    url              String?
    stockLevel       StockLevel         @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockLevelId     String
    costPerUnit      Decimal
    categories       MaterialCategory[]
    vendor           Vendor             @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    vendorId         String
    stockLogs        MaterialStockLog[]
    productMaterials ProductMaterial[]
    createdAt        DateTime           @default(now())
}

model ProductCategory {
    id         String    @id @default(uuid())
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String
    products   Product[]
}

model ProductMaterial {
    product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    quantity   Decimal
    productId  String
    materialId String

    @@id([productId, materialId])
}

model Product {
    id             String            @id @default(uuid())
    name           String
    stockLevel     StockLevel        @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockLevelId   String
    batchSize      Int
    materials      ProductMaterial[]
    retailPrice    Decimal
    wholesalePrice Decimal
    categories     ProductCategory[]
}
