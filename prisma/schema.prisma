// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model AppState {
    id           Int           @id @default(1)
    auditState   AuditAppState @relation(fields: [auditStateId], references: [id])
    auditStateId Int           @unique
}

model AuditAppState {
    id            Int            @id @default(1)
    inProgress    Boolean        @default(false)
    appState      AppState?
    materialAudit MaterialAudit?
}

model StockLevel {
    id          String     @id @default(uuid())
    stock       Decimal
    stockUnit   StockUnit  @relation(fields: [stockUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockUnitId String
    minStock    Decimal?
    materials   Material[]
    products    Product[]
}

model StockUnit {
    id                   String       @id @default(uuid())
    nameSingular         String       @unique
    namePlural           String       @unique
    abbreviationSingular String       @unique
    abbreviationPlural   String       @unique
    category             String
    stockLevels          StockLevel[]
}

model Category {
    id                 String             @id @default(uuid())
    name               String             @unique
    slug               String             @unique
    color              String             @default("#cbd5e1")
    materialCategories MaterialCategory[]
    productCategories  ProductCategory[]
}

model StockRecord {
    id                String             @id @default(uuid())
    prevStock         Decimal
    stock             Decimal
    notes             String?
    createdAt         DateTime           @default(now())
    materialStockLogs MaterialStockLog[]
    productStockLogs  ProductStockLog[]
}

model Vendor {
    id        String     @id @default(uuid())
    name      String     @unique
    url       String?
    materials Material[]
}

model MaterialCategory {
    id         String     @id @default(uuid())
    category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String
    materials  Material[]
}

model MaterialStockLog {
    material          Material                @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialId        String
    stockRecord       StockRecord             @relation(fields: [stockRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockRecordId     String
    stockRecordType   MaterialStockRecordType @relation(fields: [stockRecordTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockRecordTypeId String

    @@id([materialId, stockRecordId])
}

model MaterialStockRecordType {
    id   String             @id @default(uuid())
    name String             @unique
    logs MaterialStockLog[]
}

model MaterialAudit {
    id              String              @id @default(uuid())
    category        String
    items           MaterialAuditItem[]
    createdAt       DateTime            @default(now())
    completedAt     DateTime?
    auditAppState   AuditAppState?      @relation(fields: [auditAppStateId], references: [id])
    auditAppStateId Int?                @unique
}

model MaterialAuditItem {
    id            String         @id @default(uuid())
    name          String
    expectedStock Decimal
    actualStock   Decimal
    stockUnit     String
    notes         String
    audit         MaterialAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    material      Material       @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    auditId       String?
    materialId    String
}

model Material {
    id               String              @id @default(uuid())
    name             String
    url              String?
    stockLevel       StockLevel          @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockLevelId     String
    costPerUnit      Decimal
    categories       MaterialCategory[]
    vendor           Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    vendorId         String
    stockLogs        MaterialStockLog[]
    productMaterials ProductMaterial[]
    createdAt        DateTime            @default(now())
    auditItems       MaterialAuditItem[]
}

model ProductCategory {
    id         String    @id @default(uuid())
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String
    products   Product[]
}

model ProductMaterial {
    product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    quantity   Decimal
    productId  String
    materialId String

    @@id([productId, materialId])
}

model ProductStockLog {
    product           Product                @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productId         String
    stockRecord       StockRecord            @relation(fields: [stockRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockRecordId     String
    stockRecordType   ProductStockRecordType @relation(fields: [stockRecordTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockRecordTypeId String

    @@id([productId, stockRecordId])
}

model ProductStockRecordType {
    id              String            @id @default(uuid())
    name            String            @unique
    productStockLog ProductStockLog[]
}

model Product {
    id             String            @id @default(uuid())
    name           String
    stockLevel     StockLevel        @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    stockLevelId   String
    batchSize      Int
    materials      ProductMaterial[]
    retailPrice    Decimal
    wholesalePrice Decimal
    categories     ProductCategory[]
    stockLogs      ProductStockLog[]
    createdAt      DateTime          @default(now())
}
