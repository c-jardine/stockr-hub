// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model AppState {
    id           Int           @id @default(1)
    auditState   AuditAppState @relation(fields: [auditStateId], references: [id])
    auditStateId Int           @unique
}

model AuditAppState {
    id         Int     @id @default(1)
    inProgress Boolean @default(false)

    appState      AppState?
    materialAudit MaterialAudit?
}

model StockLevel {
    id          String   @id @default(uuid())
    stock       Decimal
    stockUnitId String
    minStock    Decimal?

    stockUnit StockUnit  @relation(fields: [stockUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materials Material[]
    products  Product[]
}

model StockUnit {
    id                   String @id @default(uuid())
    nameSingular         String @unique
    namePlural           String @unique
    abbreviationSingular String @unique
    abbreviationPlural   String @unique
    category             String

    stockLevels StockLevel[]
}

// Category
model Category {
    id    String @id @default(uuid())
    name  String @unique
    slug  String @unique
    color String @default("#cbd5e1")

    materialCategories MaterialCategory[]
    productCategories  ProductCategory[]
}

model MaterialCategory {
    id         String   @id @default(uuid())
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String

    materials Material[]
}

model ProductCategory {
    id         String   @id @default(uuid())
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String

    products Product[]
}

// Vendor
model Vendor {
    id   String  @id @default(uuid())
    name String  @unique
    url  String?

    materials Material[]
}

// Inventory logging
enum InventoryAdjustmentType {
    INCREASE
    DECREASE
    SET
}

model MaterialChangeType {
    id          String  @id @default(uuid())
    name        String  @unique
    description String?

    adjustmentType InventoryAdjustmentType
    inventoryLogs  MaterialInventoryLog[]
}

model ProductChangeType {
    id          String  @id @default(uuid())
    name        String  @unique
    description String?

    adjustmentType InventoryAdjustmentType
    inventoryLogs  ProductInventoryLog[]
}

model InventoryLog {
    id               String   @id @default(uuid())
    timestamp        DateTime @default(now())
    quantityChange   Decimal
    previousQuantity Decimal
    newQuantity      Decimal
    notes            String

    materialInventoryLogs MaterialInventoryLog[]
    productInventoryLogs  ProductInventoryLog[]
}

model MaterialInventoryLog {
    id             String @id @default(uuid())
    materialId     String
    inventoryLogId String
    changeTypeId   String

    changeType   MaterialChangeType @relation(fields: [changeTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    material     Material           @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    inventoryLog InventoryLog       @relation(fields: [inventoryLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductInventoryLog {
    id             String @id @default(uuid())
    productId      String
    inventoryLogId String
    changeTypeId   String

    changeType   ProductChangeType @relation(fields: [changeTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    product      Product           @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    inventoryLog InventoryLog      @relation(fields: [inventoryLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MaterialAudit {
    id              String              @id @default(uuid())
    category        String
    items           MaterialAuditItem[]
    createdAt       DateTime            @default(now())
    completedAt     DateTime?
    auditAppStateId Int?                @unique

    auditAppState AuditAppState? @relation(fields: [auditAppStateId], references: [id])
}

model MaterialAuditItem {
    id            String  @id @default(uuid())
    name          String
    expectedStock Decimal
    actualStock   Decimal
    stockUnit     String
    notes         String
    auditId       String?
    materialId    String

    material Material       @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    audit    MaterialAudit? @relation(fields: [auditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Material {
    id           String   @id @default(uuid())
    name         String
    url          String?
    stockLevelId String
    costPerUnit  Decimal
    vendorId     String
    createdAt    DateTime @default(now())

    stockLevel       StockLevel             @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categories       MaterialCategory[]
    vendor           Vendor                 @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productMaterials ProductMaterial[]
    auditItems       MaterialAuditItem[]
    inventoryLogs    MaterialInventoryLog[]
}

model ProductMaterial {
    quantity   Decimal
    productId  String
    materialId String

    product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    material Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([productId, materialId])
}

model Product {
    id             String   @id @default(uuid())
    name           String
    stockLevelId   String
    batchSize      Int
    retailPrice    Decimal
    wholesalePrice Decimal
    createdAt      DateTime @default(now())

    stockLevel    StockLevel            @relation(fields: [stockLevelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materials     ProductMaterial[]
    categories    ProductCategory[]
    inventoryLogs ProductInventoryLog[]
}
